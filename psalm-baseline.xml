<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="6.10.0@9c0add4eb88d4b169ac04acb7c679918cbb9c252">
  <file src="src/Command/Base.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$config]]></code>
    </LessSpecificReturnStatement>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$input->getArguments()]]></code>
      <code><![CDATA[$input->getOptions()]]></code>
    </MixedArgumentTypeCoercion>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string|null]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Command/Get.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[(string) $software]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[\array_map(
            static fn(mixed $software): DownloadConfig => $toDownload[$software]
                ?? DownloadConfig::fromSoftwareId((string) $software),
            $input->getArgument(self::ARG_SOFTWARE),
        )]]></code>
    </LessSpecificReturnStatement>
    <MixedArgument>
      <code><![CDATA[$forceDownload]]></code>
      <code><![CDATA[$input->getArgument(self::ARG_SOFTWARE)]]></code>
    </MixedArgument>
    <MixedArrayOffset>
      <code><![CDATA[$toDownload[$software]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA[$forceDownload]]></code>
    </MixedAssignment>
    <MoreSpecificReturnType>
      <code><![CDATA[list<DownloadConfig>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Command/ListSoftware.php">
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$software->homepage]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Command/Show.php">
    <InvalidArrayOffset>
      <code><![CDATA[$units[$i]]]></code>
    </InvalidArrayOffset>
    <InvalidOperand>
      <code><![CDATA[$bytes /= 1024]]></code>
    </InvalidOperand>
    <MixedArgument>
      <code><![CDATA[$units[$i]]]></code>
    </MixedArgument>
    <PossiblyFalseArgument>
      <code><![CDATA[$destinationPath]]></code>
    </PossiblyFalseArgument>
  </file>
  <file src="src/DLoad.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$files]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->configDestination->path ?? $action->extractPath ?? (string) \getcwd()]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string]]></code>
    </MoreSpecificReturnType>
    <PossiblyNullReference>
      <code><![CDATA[getPathname]]></code>
    </PossiblyNullReference>
  </file>
  <file src="src/Module/Archive/ArchiveFactory.php">
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$this->matchers]]></code>
    </MixedPropertyTypeCoercion>
    <PropertyTypeCoercion>
      <code><![CDATA[\array_unique(\array_merge($this->extensions, $extensions))]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Module/Archive/Internal/NullArchive.php">
    <MoreSpecificReturnType>
      <code><![CDATA[\Generator<non-empty-string, \SplFileInfo, \SplFileInfo|null, void>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Module/Archive/Internal/PharArchive.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[PharArchive]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Module/Archive/Internal/PharAwareArchive.php">
    <MoreSpecificReturnType>
      <code><![CDATA[\Generator]]></code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$archive]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Module/Archive/Internal/TarPharArchive.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[TarPharArchive]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Module/Archive/Internal/ZipPharArchive.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[ZipPharArchive]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Module/Binary/Internal/BinaryExecutor.php">
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$output]]></code>
      <code><![CDATA[$output]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Module/Binary/Internal/VersionComparator.php">
    <PossiblyNullArgument>
      <code><![CDATA[$versionOnly]]></code>
      <code><![CDATA[\preg_replace('/[-+].*$/', '', $constraint)]]></code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code><![CDATA[!$hasPreB]]></code>
      <code><![CDATA[$bIsNum]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Module/Common/Config/Action/Download.php">
    <MissingConstructor>
      <code><![CDATA[$software]]></code>
    </MissingConstructor>
  </file>
  <file src="src/Module/Common/Config/Embed/Binary.php">
    <MissingConstructor>
      <code><![CDATA[$name]]></code>
    </MissingConstructor>
  </file>
  <file src="src/Module/Common/Config/Embed/Repository.php">
    <MissingConstructor>
      <code><![CDATA[$uri]]></code>
    </MissingConstructor>
  </file>
  <file src="src/Module/Common/Config/Embed/Software.php">
    <MissingConstructor>
      <code><![CDATA[$name]]></code>
    </MissingConstructor>
  </file>
  <file src="src/Module/Common/Internal/Injection/ConfigLoader.php">
    <MixedMethodCall>
      <code><![CDATA[new $attribute->class()]]></code>
      <code><![CDATA[new $attribute->class()]]></code>
    </MixedMethodCall>
    <RedundantCondition>
      <code><![CDATA[\assert($xml instanceof \SimpleXMLElement)]]></code>
      <code><![CDATA[\assert($xml instanceof \SimpleXMLElement)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Module/Common/Internal/ObjectContainer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$id]]></code>
    </ArgumentTypeCoercion>
    <ImplementedReturnTypeMismatch>
      <code><![CDATA[object]]></code>
    </ImplementedReturnTypeMismatch>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->factory]]></code>
    </InvalidPropertyAssignmentValue>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$arguments]]></code>
      <code><![CDATA[$service]]></code>
    </MixedArgumentTypeCoercion>
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$this->cache]]></code>
    </MixedPropertyTypeCoercion>
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$service]]></code>
    </MoreSpecificImplementedParamType>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->cache]]></code>
    </PropertyTypeCoercion>
    <UndefinedMethod>
      <code><![CDATA[$id::create(...)]]></code>
    </UndefinedMethod>
  </file>
  <file src="src/Module/Downloader/Downloader.php">
    <InternalMethod>
      <code><![CDATA[limit]]></code>
      <code><![CDATA[limit]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
      <code><![CDATA[toArray]]></code>
    </InternalMethod>
    <InvalidNullableReturnType>
      <code><![CDATA[ReleaseInterface]]></code>
    </InvalidNullableReturnType>
    <InvalidReturnType>
      <code><![CDATA[AssetInterface]]></code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code><![CDATA[$temp]]></code>
      <code><![CDATA[\sys_get_temp_dir()]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Module/Downloader/Internal/DownloadContext.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[$asset]]></code>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$release]]></code>
      <code><![CDATA[$repoConfig]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Module/Downloader/SoftwareCollection.php">
    <MixedArgument>
      <code><![CDATA[$softwareArray]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$softwareArray]]></code>
    </MixedAssignment>
  </file>
  <file src="src/Module/Repository/Collection/CompositeRepository.php">
    <InvalidArgument>
      <code><![CDATA[function () {
            foreach ($this->repositories as $repository) {
                yield from $repository->getReleases();
            }
        }]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Module/Repository/Collection/ReleasesCollection.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[\ltrim(\str_replace(
            '-' . $stability->value,
            '.' . $stability->getWeight() . '.',
            $release->getVersion(),
        ), 'v')]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Module/Repository/Internal/CachedGenerator.php">
    <LessSpecificImplementedReturnType>
      <code><![CDATA[\Traversable<array-key, T>]]></code>
    </LessSpecificImplementedReturnType>
    <MixedAssignment>
      <code><![CDATA[$key]]></code>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
  </file>
  <file src="src/Module/Repository/Internal/Collection.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$items instanceof \Closure => static::create($items())]]></code>
    </DocblockTypeContradiction>
    <InvalidFunctionCall>
      <code><![CDATA[$items()]]></code>
    </InvalidFunctionCall>
    <MissingClosureParamType>
      <code><![CDATA[$item]]></code>
    </MissingClosureParamType>
    <MixedArgument>
      <code><![CDATA[$item]]></code>
      <code><![CDATA[$item]]></code>
      <code><![CDATA[$items()]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$items]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$items[]]]></code>
    </MixedAssignment>
    <MixedReturnStatement>
      <code><![CDATA[$this->items instanceof CachedGenerator
                ? $this->items->first()
                : ($this->items === [] ? null : $this->items[\array_key_first($this->items)])]]></code>
    </MixedReturnStatement>
    <UnsafeGenericInstantiation>
      <code><![CDATA[new static($items)]]></code>
      <code><![CDATA[new static($items)]]></code>
      <code><![CDATA[new static(new CachedGenerator($items))]]></code>
    </UnsafeGenericInstantiation>
  </file>
  <file src="src/Module/Repository/Internal/GitHub/Factory.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$org]]></code>
      <code><![CDATA[$repo]]></code>
    </ArgumentTypeCoercion>
    <InternalClass>
      <code><![CDATA[new GitHubRepository($org, $repo, $this->createClient())]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new GitHubRepository($org, $repo, $this->createClient())]]></code>
    </InternalMethod>
    <PossiblyFalseArgument>
      <code><![CDATA[$uri]]></code>
    </PossiblyFalseArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$org]]></code>
    </PossiblyUndefinedArrayOffset>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$this->config->token]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Module/Repository/Internal/GitHub/GitHubAsset.php">
    <InternalClass>
      <code><![CDATA[new self($client, $release, $data['name'], $data['browser_download_url'])]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new self($client, $release, $data['name'], $data['browser_download_url'])]]></code>
    </InternalMethod>
    <LessSpecificImplementedReturnType>
      <code><![CDATA[\Traversable]]></code>
    </LessSpecificImplementedReturnType>
  </file>
  <file src="src/Module/Repository/Internal/GitHub/GitHubRelease.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$name]]></code>
    </ArgumentTypeCoercion>
    <InternalClass>
      <code><![CDATA[GitHubAsset::fromApiResponse($client, $result, $item)]]></code>
      <code><![CDATA[new self($client, $repository, $name, $version)]]></code>
      <code><![CDATA[self::getTagName($data)]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[GitHubAsset::fromApiResponse($client, $result, $item)]]></code>
      <code><![CDATA[new self($client, $repository, $name, $version)]]></code>
      <code><![CDATA[self::getTagName($data)]]></code>
    </InternalMethod>
    <InvalidArgument>
      <code><![CDATA[$data]]></code>
      <code><![CDATA[static function () use ($client, $result, $data): \Generator {
            /** @var GitHubAssetApiResponse $item */
            foreach ($data['assets'] ?? [] as $item) {
                yield GitHubAsset::fromApiResponse($client, $result, $item);
            }
        }]]></code>
    </InvalidArgument>
    <InvalidArrayOffset>
      <code><![CDATA[$data['tag_name']]]></code>
      <code><![CDATA[$data['tag_name']]]></code>
    </InvalidArrayOffset>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->client->request('GET', $config)->getContent()]]></code>
    </LessSpecificReturnStatement>
    <MixedArgument>
      <code><![CDATA[$version]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$version]]></code>
    </MixedAssignment>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string]]></code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument>
      <code><![CDATA[$data['tag_name']]]></code>
    </PossiblyNullArgument>
    <PossiblyNullOperand>
      <code><![CDATA[$data['tag_name']]]></code>
    </PossiblyNullOperand>
    <RedundantCondition>
      <code><![CDATA[$this->assets === null]]></code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code><![CDATA[$this->assets === null]]></code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Module/Repository/Internal/GitHub/GitHubRepository.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$pageLoader()]]></code>
    </ArgumentTypeCoercion>
    <InternalClass>
      <code><![CDATA[GitHubRelease::fromApiResponse($this, $this->client, $releaseData)]]></code>
      <code><![CDATA[self::URL_RELEASES]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[GitHubRelease::fromApiResponse($this, $this->client, $releaseData)]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[hasNextPage]]></code>
      <code><![CDATA[releasesRequest]]></code>
      <code><![CDATA[request]]></code>
      <code><![CDATA[uri]]></code>
    </InternalMethod>
    <InternalProperty>
      <code><![CDATA[$this->client]]></code>
      <code><![CDATA[$this->name]]></code>
      <code><![CDATA[$this->releases]]></code>
    </InternalProperty>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$releaseData]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Module/Repository/Internal/Paginator.php">
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[$loader->valid() ? $loader->current() : []]]></code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="src/Module/Repository/Internal/Release.php">
    <InvalidNullableReturnType>
      <code><![CDATA[Stability]]></code>
    </InvalidNullableReturnType>
    <LessSpecificReturnStatement>
      <code><![CDATA[isset($parts[1])
            ? $number . '-' . $parts[1]
            : $number]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string]]></code>
    </MoreSpecificReturnType>
    <NullableReturnStatement>
      <code><![CDATA[Stability::tryFrom(VersionParser::parseStability($version))]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/Service/Factoriable.php">
    <InvalidDocblock>
      <code><![CDATA[Factoriable]]></code>
    </InvalidDocblock>
  </file>
</files>
